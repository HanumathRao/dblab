/* Generated by Purgatory 2014-2015 */

package ch.epfl.data.dblab.legobase.deep.storagemanager

import ch.epfl.data.sc.pardis
import pardis.ir._
import pardis.types.PardisTypeImplicits._
import pardis.effects._
import pardis.deep._
import pardis.deep.scalalib._
import pardis.deep.scalalib.collection._
import pardis.deep.scalalib.io._
trait LegobaseScannerOps extends Base  {  
  // Type representation
  val LegobaseScannerType = LegobaseScannerIRs.LegobaseScannerType
  implicit val typeLegobaseScanner: TypeRep[LegobaseScanner] = LegobaseScannerType
  implicit class LegobaseScannerRep(self : Rep[LegobaseScanner]) {
     def next_int() : Rep[Int] = legobaseScannerNext_int(self)
     def next_double() : Rep[Double] = legobaseScannerNext_double(self)
     def next_char() : Rep[Char] = legobaseScannerNext_char(self)
     def next(buf : Rep[Array[Byte]])(implicit overload1 : Overloaded1) : Rep[Int] = legobaseScannerNext1(self, buf)
     def next(buf : Rep[Array[Byte]], offset : Rep[Int])(implicit overload2 : Overloaded2) : Rep[Int] = legobaseScannerNext2(self, buf, offset)
     def next_date : Rep[Int] = legobaseScannerNext_date(self)
     def hasNext() : Rep[Boolean] = legobaseScannerHasNext(self)
     def filename : Rep[String] = legobaseScanner_Field_Filename(self)
  }
  object LegobaseScanner {

  }
  // constructors
   def __newLegobaseScanner(filename : Rep[String]) : Rep[LegobaseScanner] = legobaseScannerNew(filename)
  // IR defs
  val LegobaseScannerNew = LegobaseScannerIRs.LegobaseScannerNew
  type LegobaseScannerNew = LegobaseScannerIRs.LegobaseScannerNew
  val LegobaseScannerNext_int = LegobaseScannerIRs.LegobaseScannerNext_int
  type LegobaseScannerNext_int = LegobaseScannerIRs.LegobaseScannerNext_int
  val LegobaseScannerNext_double = LegobaseScannerIRs.LegobaseScannerNext_double
  type LegobaseScannerNext_double = LegobaseScannerIRs.LegobaseScannerNext_double
  val LegobaseScannerNext_char = LegobaseScannerIRs.LegobaseScannerNext_char
  type LegobaseScannerNext_char = LegobaseScannerIRs.LegobaseScannerNext_char
  val LegobaseScannerNext1 = LegobaseScannerIRs.LegobaseScannerNext1
  type LegobaseScannerNext1 = LegobaseScannerIRs.LegobaseScannerNext1
  val LegobaseScannerNext2 = LegobaseScannerIRs.LegobaseScannerNext2
  type LegobaseScannerNext2 = LegobaseScannerIRs.LegobaseScannerNext2
  val LegobaseScannerNext_date = LegobaseScannerIRs.LegobaseScannerNext_date
  type LegobaseScannerNext_date = LegobaseScannerIRs.LegobaseScannerNext_date
  val LegobaseScannerHasNext = LegobaseScannerIRs.LegobaseScannerHasNext
  type LegobaseScannerHasNext = LegobaseScannerIRs.LegobaseScannerHasNext
  val LegobaseScanner_Field_Filename = LegobaseScannerIRs.LegobaseScanner_Field_Filename
  type LegobaseScanner_Field_Filename = LegobaseScannerIRs.LegobaseScanner_Field_Filename
  // method definitions
   def legobaseScannerNew(filename : Rep[String]) : Rep[LegobaseScanner] = LegobaseScannerNew(filename)
   def legobaseScannerNext_int(self : Rep[LegobaseScanner]) : Rep[Int] = LegobaseScannerNext_int(self)
   def legobaseScannerNext_double(self : Rep[LegobaseScanner]) : Rep[Double] = LegobaseScannerNext_double(self)
   def legobaseScannerNext_char(self : Rep[LegobaseScanner]) : Rep[Char] = LegobaseScannerNext_char(self)
   def legobaseScannerNext1(self : Rep[LegobaseScanner], buf : Rep[Array[Byte]]) : Rep[Int] = LegobaseScannerNext1(self, buf)
   def legobaseScannerNext2(self : Rep[LegobaseScanner], buf : Rep[Array[Byte]], offset : Rep[Int]) : Rep[Int] = LegobaseScannerNext2(self, buf, offset)
   def legobaseScannerNext_date(self : Rep[LegobaseScanner]) : Rep[Int] = LegobaseScannerNext_date(self)
   def legobaseScannerHasNext(self : Rep[LegobaseScanner]) : Rep[Boolean] = LegobaseScannerHasNext(self)
   def legobaseScanner_Field_Filename(self : Rep[LegobaseScanner]) : Rep[String] = LegobaseScanner_Field_Filename(self)
  type LegobaseScanner = ch.epfl.data.dblab.legobase.storagemanager.LegobaseScanner
}
object LegobaseScannerIRs extends Base {
  // Type representation
  case object LegobaseScannerType extends TypeRep[LegobaseScanner] {
    def rebuild(newArguments: TypeRep[_]*): TypeRep[_] = LegobaseScannerType
    val name = "LegobaseScanner"
    val typeArguments = Nil
    
    val typeTag = scala.reflect.runtime.universe.typeTag[LegobaseScanner]
  }
      implicit val typeLegobaseScanner: TypeRep[LegobaseScanner] = LegobaseScannerType
  // case classes
  case class LegobaseScannerNew(filename : Rep[String]) extends ConstructorDef[LegobaseScanner](List(), "LegobaseScanner", List(List(filename))){
    override def curriedConstructor = (copy _)
  }

  case class LegobaseScannerNext_int(self : Rep[LegobaseScanner]) extends FunctionDef[Int](Some(self), "next_int", List(List())){
    override def curriedConstructor = (copy _)
  }

  case class LegobaseScannerNext_double(self : Rep[LegobaseScanner]) extends FunctionDef[Double](Some(self), "next_double", List(List())){
    override def curriedConstructor = (copy _)
  }

  case class LegobaseScannerNext_char(self : Rep[LegobaseScanner]) extends FunctionDef[Char](Some(self), "next_char", List(List())){
    override def curriedConstructor = (copy _)
  }

  case class LegobaseScannerNext1(self : Rep[LegobaseScanner], buf : Rep[Array[Byte]]) extends FunctionDef[Int](Some(self), "next", List(List(buf))){
    override def curriedConstructor = (copy _).curried
  }

  case class LegobaseScannerNext2(self : Rep[LegobaseScanner], buf : Rep[Array[Byte]], offset : Rep[Int]) extends FunctionDef[Int](Some(self), "next", List(List(buf,offset))){
    override def curriedConstructor = (copy _).curried
  }

  case class LegobaseScannerNext_date(self : Rep[LegobaseScanner]) extends FunctionDef[Int](Some(self), "next_date", List()){
    override def curriedConstructor = (copy _)
  }

  case class LegobaseScannerHasNext(self : Rep[LegobaseScanner]) extends FunctionDef[Boolean](Some(self), "hasNext", List(List())){
    override def curriedConstructor = (copy _)
  }

  case class LegobaseScanner_Field_Filename(self : Rep[LegobaseScanner]) extends FieldDef[String](self, "filename"){
    override def curriedConstructor = (copy _)
    override def isPure = true

  }

  type LegobaseScanner = ch.epfl.data.dblab.legobase.storagemanager.LegobaseScanner
}
trait LegobaseScannerImplicits extends LegobaseScannerOps { 
  // Add implicit conversions here!
}
trait LegobaseScannerPartialEvaluation extends LegobaseScannerComponent with BasePartialEvaluation {  
  // Immutable field inlining 
  override def legobaseScanner_Field_Filename(self : Rep[LegobaseScanner]) : Rep[String] = self match {
    case Def(node: LegobaseScannerNew) => node.filename
    case _ => super.legobaseScanner_Field_Filename(self)
  }

  // Mutable field inlining 
  // Pure function partial evaluation
}
trait LegobaseScannerComponent extends LegobaseScannerOps with LegobaseScannerImplicits {  }
