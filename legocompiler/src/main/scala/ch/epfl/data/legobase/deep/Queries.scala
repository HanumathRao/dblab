
package ch.epfl.data
package legobase
package deep

import scalalib._
import pardis.ir._
import pardis.ir.pardisTypeImplicits._
import pardis.deep.scalalib._
trait QueriesOps extends Base { this: QueryComponent =>
  implicit class QueriesRep(self: Rep[Queries]) {

  }
  object Queries {
    def Q1(numRuns: Rep[Int]): Rep[Unit] = queriesQ1Object(numRuns)
    def Q2(numRuns: Rep[Int]): Rep[Unit] = queriesQ2Object(numRuns)
    def Q3(numRuns: Rep[Int]): Rep[Unit] = queriesQ3Object(numRuns)
    def Q4(numRuns: Rep[Int]): Rep[Unit] = queriesQ4Object(numRuns)
    def Q5(numRuns: Rep[Int]): Rep[Unit] = queriesQ5Object(numRuns)
    def Q6(numRuns: Rep[Int]): Rep[Unit] = queriesQ6Object(numRuns)
    def Q7(numRuns: Rep[Int]): Rep[Unit] = queriesQ7Object(numRuns)
  }
  // constructors

  // case classes
  case class QueriesQ1Object(numRuns: Rep[Int]) extends FunctionDef[Unit](None, "Queries.Q1", List(List(numRuns))) {
    override def curriedConstructor = (copy _)
  }

  case class QueriesQ2Object(numRuns: Rep[Int]) extends FunctionDef[Unit](None, "Queries.Q2", List(List(numRuns))) {
    override def curriedConstructor = (copy _)
  }

  case class QueriesQ3Object(numRuns: Rep[Int]) extends FunctionDef[Unit](None, "Queries.Q3", List(List(numRuns))) {
    override def curriedConstructor = (copy _)
  }

  case class QueriesQ4Object(numRuns: Rep[Int]) extends FunctionDef[Unit](None, "Queries.Q4", List(List(numRuns))) {
    override def curriedConstructor = (copy _)
  }

  case class QueriesQ5Object(numRuns: Rep[Int]) extends FunctionDef[Unit](None, "Queries.Q5", List(List(numRuns))) {
    override def curriedConstructor = (copy _)
  }

  case class QueriesQ6Object(numRuns: Rep[Int]) extends FunctionDef[Unit](None, "Queries.Q6", List(List(numRuns))) {
    override def curriedConstructor = (copy _)
  }

  case class QueriesQ7Object(numRuns: Rep[Int]) extends FunctionDef[Unit](None, "Queries.Q7", List(List(numRuns))) {
    override def curriedConstructor = (copy _)
  }

  // method definitions
  def queriesQ1Object(numRuns: Rep[Int]): Rep[Unit] = QueriesQ1Object(numRuns)
  def queriesQ2Object(numRuns: Rep[Int]): Rep[Unit] = QueriesQ2Object(numRuns)
  def queriesQ3Object(numRuns: Rep[Int]): Rep[Unit] = QueriesQ3Object(numRuns)
  def queriesQ4Object(numRuns: Rep[Int]): Rep[Unit] = QueriesQ4Object(numRuns)
  def queriesQ5Object(numRuns: Rep[Int]): Rep[Unit] = QueriesQ5Object(numRuns)
  def queriesQ6Object(numRuns: Rep[Int]): Rep[Unit] = QueriesQ6Object(numRuns)
  def queriesQ7Object(numRuns: Rep[Int]): Rep[Unit] = QueriesQ7Object(numRuns)
  type Queries = ch.epfl.data.legobase.Queries
  case object QueriesType extends TypeRep[Queries] {
    def rebuild(newArguments: TypeRep[_]*): TypeRep[_] = QueriesType
    val name = "Queries"
    val typeArguments = Nil

    val typeTag = scala.reflect.runtime.universe.typeTag[Queries]
  }
  implicit val typeQueries = QueriesType
}
trait QueriesImplicits { this: QueriesComponent =>
  // Add implicit conversions here!
}
trait QueriesImplementations { self: DeepDSL =>
  override def queriesQ1Object(numRuns: Rep[Int]): Rep[Unit] = {
    {
      val lineitemTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]] = Loader.loadLineitem();
      GenericEngine.runQuery[Unit]({
        val constantDate: this.Rep[Long] = GenericEngine.parseDate(unit("1998-08-11"));
        val lineitemScan: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SelectOp[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]] = __newSelectOp(__newScanOp(lineitemTable))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]) => x.L_SHIPDATE.$less$eq(constantDate))));
        val aggOp: this.Rep[ch.epfl.data.legobase.queryengine.volcano.AggOp[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord, ch.epfl.data.legobase.queryengine.GroupByClass]] = __newAggOp(lineitemScan, unit(9))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]) => __newGroupByClass(x.L_RETURNFLAG, x.L_LINESTATUS))))(__lambda(((t: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord], currAgg: this.Rep[Double]) => t.L_DISCOUNT.$plus(currAgg))), __lambda(((t: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord], currAgg: this.Rep[Double]) => t.L_QUANTITY.$plus(currAgg))), __lambda(((t: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord], currAgg: this.Rep[Double]) => t.L_EXTENDEDPRICE.$plus(currAgg))), __lambda(((t: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord], currAgg: this.Rep[Double]) => t.L_EXTENDEDPRICE.$times(unit(1.0).$minus(t.L_DISCOUNT)).$plus(currAgg))), __lambda(((t: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord], currAgg: this.Rep[Double]) => t.L_EXTENDEDPRICE.$times(unit(1.0).$minus(t.L_DISCOUNT)).$times(unit(1.0).$plus(t.L_TAX)).$plus(currAgg))), __lambda(((t: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord], currAgg: this.Rep[Double]) => currAgg.$plus(unit(1)))));
        val mapOp: this.Rep[ch.epfl.data.legobase.queryengine.volcano.MapOp[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.queryengine.GroupByClass]]] = __newMapOp(aggOp)(__lambda(((kv: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.queryengine.GroupByClass]]) => kv.aggs.update(unit(6), kv.aggs.apply(unit(1)).$div(kv.aggs.apply(unit(5)))))), __lambda(((kv: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.queryengine.GroupByClass]]) => kv.aggs.update(unit(7), kv.aggs.apply(unit(2)).$div(kv.aggs.apply(unit(5)))))), __lambda(((kv: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.queryengine.GroupByClass]]) => kv.aggs.update(unit(8), kv.aggs.apply(unit(0)).$div(kv.aggs.apply(unit(5)))))));
        val sortOp: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SortOp[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.queryengine.GroupByClass]]] = __newSortOp(mapOp)(__lambda(((kv1: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.queryengine.GroupByClass]], kv2: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.queryengine.GroupByClass]]) => {
          var res: this.Var[Int] = __newVar(Character2char(kv1.key.L_RETURNFLAG).$minus(Character2char(kv2.key.L_RETURNFLAG)));
          __ifThenElse(infix_$eq$eq(readVar(res), unit(0)), __assign(res, Character2char(kv1.key.L_LINESTATUS).$minus(Character2char(kv2.key.L_LINESTATUS))), unit(()));
          readVar(res)
        })));
        val po: this.Rep[ch.epfl.data.legobase.queryengine.volcano.PrintOp[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.queryengine.GroupByClass]]] = __newPrintOp(sortOp)(__lambda(((kv: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.queryengine.GroupByClass]]) => printf(unit("%c|%c|%.2f|%.2f|%.2f|%.2f|%.2f|%.2f|%.2f|%.0f\n"), kv.key.L_RETURNFLAG, kv.key.L_LINESTATUS, kv.aggs.apply(unit(1)), kv.aggs.apply(unit(2)), kv.aggs.apply(unit(3)), kv.aggs.apply(unit(4)), kv.aggs.apply(unit(6)), kv.aggs.apply(unit(7)), kv.aggs.apply(unit(8)), kv.aggs.apply(unit(5))))), __lambda((() => unit(true))));
        po.open();
        po.next();
        printf(unit("(%d rows)\n"), po.numRows);
        unit(())
      })
    }
  }
  override def queriesQ2Object(numRuns: Rep[Int]): Rep[Unit] = {
    {
      val partTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord]] = Loader.loadPart();
      val partsuppTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord]] = Loader.loadPartsupp();
      val nationTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord]] = Loader.loadNation();
      val regionTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord]] = Loader.loadRegion();
      val supplierTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord]] = Loader.loadSupplier();
      GenericEngine.runQuery[Unit]({
        val africa: this.Rep[ch.epfl.data.legobase.LBString] = GenericEngine.parseString(unit("AFRICA"));
        val tin: this.Rep[ch.epfl.data.legobase.LBString] = GenericEngine.parseString(unit("TIN"));
        val partsuppScan: this.Rep[ch.epfl.data.legobase.queryengine.volcano.ScanOp[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord]] = __newScanOp(partsuppTable);
        val supplierScan: this.Rep[ch.epfl.data.legobase.queryengine.volcano.ScanOp[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord]] = __newScanOp(supplierTable);
        val jo1: this.Rep[ch.epfl.data.legobase.queryengine.volcano.HashJoinOp[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord, Int]] = __newHashJoinOp(supplierScan, partsuppScan)(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], y: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord]) => infix_$eq$eq(x.S_SUPPKEY, y.PS_SUPPKEY))))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord]) => x.S_SUPPKEY)))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord]) => x.PS_SUPPKEY)));
        val nationScan: this.Rep[ch.epfl.data.legobase.queryengine.volcano.ScanOp[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord]] = __newScanOp(nationTable);
        val jo2: this.Rep[ch.epfl.data.legobase.queryengine.volcano.HashJoinOp[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord], Int]] = __newHashJoinOp(nationScan, jo1)(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord], y: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord]]) => infix_$eq$eq(x.N_NATIONKEY, y.selectDynamic[Int](unit("S_NATIONKEY"))))))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord]) => x.N_NATIONKEY)))(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord]]) => x.selectDynamic[Int](unit("S_NATIONKEY")))));
        val partScan: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SelectOp[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord]] = __newSelectOp(__newScanOp(partTable))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord]) => infix_$eq$eq(x.P_SIZE, unit(43)).$amp$amp(x.P_TYPE.endsWith(tin)))));
        val jo3: this.Rep[ch.epfl.data.legobase.queryengine.volcano.HashJoinOp[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord]], Int]] = __newHashJoinOp(partScan, jo2)(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord], y: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord]]]) => infix_$eq$eq(x.P_PARTKEY, y.selectDynamic[Int](unit("PS_PARTKEY"))))))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord]) => x.P_PARTKEY)))(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord]]]) => x.selectDynamic[Int](unit("PS_PARTKEY")))));
        val regionScan: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SelectOp[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord]] = __newSelectOp(__newScanOp(regionTable))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord]) => x.R_NAME.$eq$eq$eq(africa))));
        val jo4: this.Rep[ch.epfl.data.legobase.queryengine.volcano.HashJoinOp[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord]]], Int]] = __newHashJoinOp(regionScan, jo3)(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord], y: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord]]]]) => infix_$eq$eq(x.R_REGIONKEY, y.selectDynamic[Int](unit("N_REGIONKEY"))))))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord]) => x.R_REGIONKEY)))(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord]]]]) => x.selectDynamic[Int](unit("N_REGIONKEY")))));
        val wo: this.Rep[ch.epfl.data.legobase.queryengine.volcano.WindowOp[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord]]]], Int, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord]]]]]] = __newWindowOp(jo4)(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord]]]]]) => x.selectDynamic[Int](unit("P_PARTKEY")))))(__lambda(((x: this.Rep[scala.collection.mutable.ArrayBuffer[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord]]]]]]) => x.minBy[Double](__lambda(((y: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord]]]]]) => y.selectDynamic[Double](unit("PS_SUPPLYCOST"))))))));
        val so: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SortOp[ch.epfl.data.legobase.queryengine.WindowRecord[Int, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord]]]]]]] = __newSortOp(wo)(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.WindowRecord[Int, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord]]]]]], y: this.Rep[ch.epfl.data.legobase.queryengine.WindowRecord[Int, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord]]]]]]) => __ifThenElse(x.wnd.selectDynamic[Double](unit("S_ACCTBAL")).$less(y.wnd.selectDynamic[Double](unit("S_ACCTBAL"))), unit(1), __ifThenElse(x.wnd.selectDynamic[Double](unit("S_ACCTBAL")).$greater(y.wnd.selectDynamic[Double](unit("S_ACCTBAL"))), unit(-1), {
          var res: this.Var[Int] = __newVar(x.wnd.selectDynamic[ch.epfl.data.legobase.LBString](unit("N_NAME")).compare(y.wnd.selectDynamic[ch.epfl.data.legobase.LBString](unit("N_NAME"))));
          __ifThenElse(infix_$eq$eq(readVar(res), unit(0)), {
            __assign(res, x.wnd.selectDynamic[ch.epfl.data.legobase.LBString](unit("S_NAME")).compare(y.wnd.selectDynamic[ch.epfl.data.legobase.LBString](unit("S_NAME"))));
            __ifThenElse(infix_$eq$eq(readVar(res), unit(0)), __assign(res, x.wnd.selectDynamic[Int](unit("P_PARTKEY")).$minus(y.wnd.selectDynamic[Int](unit("P_PARTKEY")))), unit(()))
          }, unit(()));
          readVar(res)
        })))));
        var j: this.Var[Int] = __newVar(unit(0));
        val po: this.Rep[ch.epfl.data.legobase.queryengine.volcano.PrintOp[ch.epfl.data.legobase.queryengine.WindowRecord[Int, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord]]]]]]] = __newPrintOp(so)(__lambda(((e: this.Rep[ch.epfl.data.legobase.queryengine.WindowRecord[Int, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord]]]]]]) => {
          val kv: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord]]]]] = e.wnd;
          printf(unit("%.2f|%s|%s|%d|%s|%s|%s|%s\n"), kv.selectDynamic[Nothing](unit("S_ACCTBAL")), kv.selectDynamic[ch.epfl.data.legobase.LBString](unit("S_NAME")).string, kv.selectDynamic[ch.epfl.data.legobase.LBString](unit("N_NAME")).string, kv.selectDynamic[Nothing](unit("P_PARTKEY")), kv.selectDynamic[ch.epfl.data.legobase.LBString](unit("P_MFGR")).string, kv.selectDynamic[ch.epfl.data.legobase.LBString](unit("S_ADDRESS")).string, kv.selectDynamic[ch.epfl.data.legobase.LBString](unit("S_PHONE")).string, kv.selectDynamic[ch.epfl.data.legobase.LBString](unit("S_COMMENT")).string);
          __assign(j, readVar(j).$plus(unit(1)))
        })), __lambda((() => readVar(j).$less(unit(100)))));
        po.open();
        po.next();
        printf(unit("(%d rows)\n"), po.numRows);
        unit(())
      })
    }
  }
  override def queriesQ3Object(numRuns: Rep[Int]): Rep[Unit] = {
    {
      val lineitemTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]] = Loader.loadLineitem();
      val ordersTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]] = Loader.loadOrders();
      val customerTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord]] = Loader.loadCustomer();
      GenericEngine.runQuery[Unit]({
        val constantDate: this.Rep[Long] = GenericEngine.parseDate(unit("1995-03-04"));
        val scanCustomer: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SelectOp[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord]] = __newSelectOp(__newScanOp(customerTable))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord]) => x.C_MKTSEGMENT.$eq$eq$eq(GenericEngine.parseString(unit("HOUSEHOLD"))))));
        val scanOrders: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SelectOp[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]] = __newSelectOp(__newScanOp(ordersTable))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]) => x.O_ORDERDATE.$less(constantDate))));
        val scanLineitem: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SelectOp[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]] = __newSelectOp(__newScanOp(lineitemTable))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]) => x.L_SHIPDATE.$greater(constantDate))));
        val jo1: this.Rep[ch.epfl.data.legobase.queryengine.volcano.HashJoinOp[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord, Int]] = __newHashJoinOp(scanCustomer, scanOrders)(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord], y: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]) => infix_$eq$eq(x.C_CUSTKEY, y.O_CUSTKEY))))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord]) => x.C_CUSTKEY)))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]) => x.O_CUSTKEY)));
        val jo2: this.Rep[ch.epfl.data.legobase.queryengine.volcano.HashJoinOp[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord, Int]] = __newHashJoinOp(jo1, scanLineitem)(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]], y: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]) => infix_$eq$eq(x.selectDynamic[Int](unit("O_ORDERKEY")), y.L_ORDERKEY))))(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]]) => x.selectDynamic[Int](unit("O_ORDERKEY")))))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]) => x.L_ORDERKEY)));
        val aggOp: this.Rep[ch.epfl.data.legobase.queryengine.volcano.AggOp[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord], ch.epfl.data.legobase.queryengine.Q3GRPRecord]] = __newAggOp(jo2, unit(1))(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]]) => __newQ3GRPRecord(x.selectDynamic[Int](unit("L_ORDERKEY")), x.selectDynamic[Long](unit("O_ORDERDATE")), x.selectDynamic[Int](unit("O_SHIPPRIORITY"))))))(__lambda(((t: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]], currAgg: this.Rep[Double]) => currAgg.$plus(t.selectDynamic[Double](unit("L_EXTENDEDPRICE")).$times(unit(1.0).$minus(t.selectDynamic[Double](unit("L_DISCOUNT"))))))));
        val sortOp: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SortOp[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.queryengine.Q3GRPRecord]]] = __newSortOp(aggOp)(__lambda(((kv1: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.queryengine.Q3GRPRecord]], kv2: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.queryengine.Q3GRPRecord]]) => {
          val agg1: this.Rep[Double] = kv1.aggs.apply(unit(0));
          val agg2: this.Rep[Double] = kv2.aggs.apply(unit(0));
          __ifThenElse(agg1.$less(agg2), unit(1), __ifThenElse(agg1.$greater(agg2), unit(-1), {
            val k1: this.Rep[Long] = kv1.key.O_ORDERDATE;
            val k2: this.Rep[Long] = kv2.key.O_ORDERDATE;
            __ifThenElse(k1.$less(k2), unit(-1), __ifThenElse(k1.$greater(k2), unit(1), unit(0)))
          }))
        })));
        var i: this.Var[Int] = __newVar(unit(0));
        val po: this.Rep[ch.epfl.data.legobase.queryengine.volcano.PrintOp[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.queryengine.Q3GRPRecord]]] = __newPrintOp(sortOp)(__lambda(((kv: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.queryengine.Q3GRPRecord]]) => {
          printf(unit("%d|%.4f|%s|%d\n"), kv.key.L_ORDERKEY, kv.aggs.apply(unit(0)), GenericEngine.dateToString(kv.key.O_ORDERDATE), kv.key.O_SHIPPRIORITY);
          __assign(i, readVar(i).$plus(unit(1)))
        })), __lambda((() => readVar(i).$less(unit(10)))));
        po.open();
        po.next();
        printf(unit("(%d rows)\n"), po.numRows);
        unit(())
      })
    }
  }
  override def queriesQ4Object(numRuns: Rep[Int]): Rep[Unit] = {
    {
      val lineitemTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]] = Loader.loadLineitem();
      val ordersTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]] = Loader.loadOrders();
      GenericEngine.runQuery[Unit]({
        val constantDate1: this.Rep[Long] = GenericEngine.parseDate(unit("1993-11-01"));
        val constantDate2: this.Rep[Long] = GenericEngine.parseDate(unit("1993-08-01"));
        val scanOrders: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SelectOp[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]] = __newSelectOp(__newScanOp(ordersTable))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]) => x.O_ORDERDATE.$less(constantDate1).$amp$amp(x.O_ORDERDATE.$greater$eq(constantDate2)))));
        val scanLineitem: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SelectOp[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]] = __newSelectOp(__newScanOp(lineitemTable))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]) => x.L_COMMITDATE.$less(x.L_RECEIPTDATE))));
        val hj: this.Rep[ch.epfl.data.legobase.queryengine.volcano.LeftHashSemiJoinOp[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord, Int]] = __newLeftHashSemiJoinOp(scanOrders, scanLineitem)(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord], y: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]) => infix_$eq$eq(x.O_ORDERKEY, y.L_ORDERKEY))))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]) => x.O_ORDERKEY)))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]) => x.L_ORDERKEY)));
        val aggOp: this.Rep[ch.epfl.data.legobase.queryengine.volcano.AggOp[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord, ch.epfl.data.legobase.LBString]] = __newAggOp(hj, unit(1))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]) => x.O_ORDERPRIORITY)))(__lambda(((t: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord], currAgg: this.Rep[Double]) => currAgg.$plus(unit(1)))));
        val sortOp: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SortOp[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.LBString]]] = __newSortOp(aggOp)(__lambda(((kv1: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.LBString]], kv2: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.LBString]]) => {
          val k1: this.Rep[ch.epfl.data.legobase.LBString] = kv1.key;
          val k2: this.Rep[ch.epfl.data.legobase.LBString] = kv2.key;
          k1.diff(k2)
        })));
        val po: this.Rep[ch.epfl.data.legobase.queryengine.volcano.PrintOp[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.LBString]]] = __newPrintOp(sortOp)(__lambda(((kv: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.LBString]]) => printf(unit("%s|%.0f\n"), kv.key.string, kv.aggs.apply(unit(0))))), __lambda((() => unit(true))));
        po.open();
        po.next();
        printf(unit("(%d rows)\n"), po.numRows);
        unit(())
      })
    }
  }
  override def queriesQ5Object(numRuns: Rep[Int]): Rep[Unit] = {
    {
      val lineitemTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]] = Loader.loadLineitem();
      val nationTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord]] = Loader.loadNation();
      val customerTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord]] = Loader.loadCustomer();
      val supplierTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord]] = Loader.loadSupplier();
      val regionTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord]] = Loader.loadRegion();
      val ordersTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]] = Loader.loadOrders();
      GenericEngine.runQuery[Unit]({
        val constantDate1: this.Rep[Long] = GenericEngine.parseDate(unit("1996-01-01"));
        val constantDate2: this.Rep[Long] = GenericEngine.parseDate(unit("1997-01-01"));
        val scanRegion: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SelectOp[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord]] = __newSelectOp(__newScanOp(regionTable))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord]) => x.R_NAME.$eq$eq$eq(GenericEngine.parseString(unit("ASIA"))))));
        val scanNation: this.Rep[ch.epfl.data.legobase.queryengine.volcano.ScanOp[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord]] = __newScanOp(nationTable);
        val scanSupplier: this.Rep[ch.epfl.data.legobase.queryengine.volcano.ScanOp[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord]] = __newScanOp(supplierTable);
        val scanCustomer: this.Rep[ch.epfl.data.legobase.queryengine.volcano.ScanOp[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord]] = __newScanOp(customerTable);
        val scanLineitem: this.Rep[ch.epfl.data.legobase.queryengine.volcano.ScanOp[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]] = __newScanOp(lineitemTable);
        val scanOrders: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SelectOp[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]] = __newSelectOp(__newScanOp(ordersTable))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]) => x.O_ORDERDATE.$greater$eq(constantDate1).$amp$amp(x.O_ORDERDATE.$less(constantDate2)))));
        val jo1: this.Rep[ch.epfl.data.legobase.queryengine.volcano.HashJoinOp[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, Int]] = __newHashJoinOp(scanRegion, scanNation)(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord], y: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord]) => infix_$eq$eq(x.R_REGIONKEY, y.N_REGIONKEY))))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord]) => x.R_REGIONKEY)))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord]) => x.N_REGIONKEY)));
        val jo2: this.Rep[ch.epfl.data.legobase.queryengine.volcano.HashJoinOp[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord, Int]] = __newHashJoinOp(jo1, scanSupplier)(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord]], y: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord]) => infix_$eq$eq(x.selectDynamic[Int](unit("N_NATIONKEY")), y.S_NATIONKEY))))(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord]]) => x.selectDynamic[Int](unit("N_NATIONKEY")))))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord]) => x.S_NATIONKEY)));
        val jo3: this.Rep[ch.epfl.data.legobase.queryengine.volcano.HashJoinOp[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord, Int]] = __newHashJoinOp(jo2, scanCustomer)(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord]], y: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord]) => infix_$eq$eq(x.selectDynamic[Int](unit("N_NATIONKEY")), y.C_NATIONKEY))))(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord]]) => x.selectDynamic[Int](unit("S_NATIONKEY")))))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord]) => x.C_NATIONKEY)));
        val jo4: this.Rep[ch.epfl.data.legobase.queryengine.volcano.HashJoinOp[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord, Int]] = __newHashJoinOp(jo3, scanOrders)(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord]], y: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]) => infix_$eq$eq(x.selectDynamic[Int](unit("C_CUSTKEY")), y.O_CUSTKEY))))(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord]]) => x.selectDynamic[Int](unit("C_CUSTKEY")))))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]) => x.O_CUSTKEY)));
        val jo5: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SelectOp[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]]] = __newSelectOp(__newHashJoinOp(jo4, scanLineitem)(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]], y: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]) => infix_$eq$eq(x.selectDynamic[Int](unit("O_ORDERKEY")), y.L_ORDERKEY))))(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]]) => x.selectDynamic[Int](unit("O_ORDERKEY")))))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]) => x.L_ORDERKEY))))(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]]) => infix_$eq$eq(x.selectDynamic[Int](unit("S_SUPPKEY")), x.selectDynamic[Int](unit("L_SUPPKEY"))))));
        val aggOp: this.Rep[ch.epfl.data.legobase.queryengine.volcano.AggOp[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord], ch.epfl.data.legobase.LBString]] = __newAggOp(jo5, unit(1))(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]]) => x.selectDynamic[ch.epfl.data.legobase.LBString](unit("N_NAME")))))(__lambda(((t: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]], currAgg: this.Rep[Double]) => currAgg.$plus(t.selectDynamic[Double](unit("L_EXTENDEDPRICE")).$times(unit(1.0).$minus(t.selectDynamic[Double](unit("L_DISCOUNT"))))))));
        val sortOp: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SortOp[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.LBString]]] = __newSortOp(aggOp)(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.LBString]], y: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.LBString]]) => __ifThenElse(x.aggs.apply(unit(0)).$less(y.aggs.apply(unit(0))), unit(1), __ifThenElse(x.aggs.apply(unit(0)).$greater(y.aggs.apply(unit(0))), unit(-1), unit(0))))));
        val po: this.Rep[ch.epfl.data.legobase.queryengine.volcano.PrintOp[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.LBString]]] = __newPrintOp(sortOp)(__lambda(((kv: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.LBString]]) => printf(unit("%s|%.4f\n"), kv.key.string, kv.aggs.apply(unit(0))))), __lambda((() => unit(true))));
        po.open();
        po.next();
        printf(unit("(%d rows)\n"), po.numRows);
        unit(())
      })
    }
  }
  override def queriesQ6Object(numRuns: Rep[Int]): Rep[Unit] = {
    {
      val lineitemTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]] = Loader.loadLineitem();
      GenericEngine.runQuery[Unit]({
        val constantDate1: this.Rep[Long] = GenericEngine.parseDate(unit("1996-01-01"));
        val constantDate2: this.Rep[Long] = GenericEngine.parseDate(unit("1997-01-01"));
        val lineitemScan: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SelectOp[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]] = __newSelectOp(__newScanOp(lineitemTable))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]) => x.L_SHIPDATE.$greater$eq(constantDate1).$amp$amp(x.L_SHIPDATE.$less(constantDate2)).$amp$amp(x.L_DISCOUNT.$greater$eq(unit(0.08))).$amp$amp(x.L_DISCOUNT.$less$eq(unit(0.1))).$amp$amp(x.L_QUANTITY.$less(unit(24))))));
        val aggOp: this.Rep[ch.epfl.data.legobase.queryengine.volcano.AggOp[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord, String]] = __newAggOp(lineitemScan, unit(1))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]) => unit("Total"))))(__lambda(((t: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord], currAgg: this.Rep[Double]) => t.L_EXTENDEDPRICE.$times(t.L_DISCOUNT).$plus(currAgg))));
        val po: this.Rep[ch.epfl.data.legobase.queryengine.volcano.PrintOp[ch.epfl.data.legobase.queryengine.AGGRecord[String]]] = __newPrintOp(aggOp)(__lambda(((kv: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[String]]) => printf(unit("%.4f\n"), kv.aggs.apply(unit(0))))), __lambda((() => unit(true))));
        po.open();
        po.next();
        printf(unit("(%d rows)\n"), po.numRows);
        unit(())
      })
    }
  }
  override def queriesQ7Object(numRuns: Rep[Int]): Rep[Unit] = {
    {
      val nationTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord]] = Loader.loadNation();
      val ordersTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]] = Loader.loadOrders();
      val lineitemTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]] = Loader.loadLineitem();
      val customerTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord]] = Loader.loadCustomer();
      val supplierTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord]] = Loader.loadSupplier();
      GenericEngine.runQuery[Unit]({
        val usa: this.Rep[ch.epfl.data.legobase.LBString] = GenericEngine.parseString(unit("UNITED STATES"));
        val indonesia: this.Rep[ch.epfl.data.legobase.LBString] = GenericEngine.parseString(unit("INDONESIA"));
        val scanNation1: this.Rep[ch.epfl.data.legobase.queryengine.volcano.ScanOp[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord]] = __newScanOp(nationTable);
        val scanNation2: this.Rep[ch.epfl.data.legobase.queryengine.volcano.ScanOp[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord]] = __newScanOp(nationTable);
        val jo1: this.Rep[ch.epfl.data.legobase.queryengine.volcano.NestedLoopsJoinOp[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord]] = __newNestedLoopsJoinOp(scanNation1, scanNation2, unit("N1_"), unit("N2_"))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord], y: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord]) => x.N_NAME.$eq$eq$eq(usa).$amp$amp(y.N_NAME.$eq$eq$eq(indonesia)).$bar$bar(x.N_NAME.$eq$eq$eq(indonesia).$amp$amp(y.N_NAME.$eq$eq$eq(usa))))));
        val scanSupplier: this.Rep[ch.epfl.data.legobase.queryengine.volcano.ScanOp[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord]] = __newScanOp(supplierTable);
        val jo2: this.Rep[ch.epfl.data.legobase.queryengine.volcano.HashJoinOp[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord, Int]] = __newHashJoinOp(jo1, scanSupplier)(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord]], y: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord]) => infix_$eq$eq(x.selectDynamic[Int](unit("N1_N_NATIONKEY")), y.S_NATIONKEY))))(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord]]) => x.selectDynamic[Int](unit("N1_N_NATIONKEY")))))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord]) => x.S_NATIONKEY)));
        val scanLineitem: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SelectOp[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]] = __newSelectOp(__newScanOp(lineitemTable))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]) => x.L_SHIPDATE.$greater$eq(GenericEngine.parseDate(unit("1995-01-01"))).$amp$amp(x.L_SHIPDATE.$less$eq(GenericEngine.parseDate(unit("1996-12-31")))))));
        val jo3: this.Rep[ch.epfl.data.legobase.queryengine.volcano.HashJoinOp[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord, Int]] = __newHashJoinOp(jo2, scanLineitem)(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord]], y: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]) => infix_$eq$eq(x.selectDynamic[Int](unit("S_SUPPKEY")), y.L_SUPPKEY))))(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord]]) => x.selectDynamic[Int](unit("S_SUPPKEY")))))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]) => x.L_SUPPKEY)));
        val scanOrders: this.Rep[ch.epfl.data.legobase.queryengine.volcano.ScanOp[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]] = __newScanOp(ordersTable);
        val jo4: this.Rep[ch.epfl.data.legobase.queryengine.volcano.HashJoinOp[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord, Int]] = __newHashJoinOp(jo3, scanOrders)(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]], y: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]) => infix_$eq$eq(x.selectDynamic[Int](unit("L_ORDERKEY")), y.O_ORDERKEY))))(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]]) => x.selectDynamic[Int](unit("L_ORDERKEY")))))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]) => x.O_ORDERKEY)));
        val scanCustomer: this.Rep[ch.epfl.data.legobase.queryengine.volcano.ScanOp[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord]] = __newScanOp(customerTable);
        val jo5: this.Rep[ch.epfl.data.legobase.queryengine.volcano.HashJoinOp[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord], Int]] = __newHashJoinOp(scanCustomer, jo4)(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord], y: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]]) => infix_$eq$eq(x.C_CUSTKEY, y.selectDynamic[Int](unit("O_CUSTKEY"))).$amp$amp(infix_$eq$eq(x.C_NATIONKEY, y.selectDynamic[Int](unit("N2_N_NATIONKEY")))))))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord]) => x.C_CUSTKEY)))(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]]) => x.selectDynamic[Int](unit("O_CUSTKEY")))));
        val gb: this.Rep[ch.epfl.data.legobase.queryengine.volcano.AggOp[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]], ch.epfl.data.legobase.queryengine.Q7GRPRecord]] = __newAggOp(jo5, unit(1))(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]]]) => __newQ7GRPRecord(x.selectDynamic[ch.epfl.data.legobase.LBString](unit("N1_N_NAME")), x.selectDynamic[ch.epfl.data.legobase.LBString](unit("N2_N_NAME")), GenericEngine.dateToYear(x.selectDynamic[Long](unit("L_SHIPDATE"))).toLong))))(__lambda(((t: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]]], currAgg: this.Rep[Double]) => currAgg.$plus(t.selectDynamic[Double](unit("L_EXTENDEDPRICE")).$times(unit(1.0).$minus(t.selectDynamic[Double](unit("L_DISCOUNT"))))))));
        val so: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SortOp[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.queryengine.Q7GRPRecord]]] = __newSortOp(gb)(__lambda(((kv1: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.queryengine.Q7GRPRecord]], kv2: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.queryengine.Q7GRPRecord]]) => {
          val k1: this.Rep[ch.epfl.data.legobase.queryengine.Q7GRPRecord] = kv1.key;
          val k2: this.Rep[ch.epfl.data.legobase.queryengine.Q7GRPRecord] = kv2.key;
          val r1: this.Rep[Int] = k1.SUPP_NATION.diff(k2.SUPP_NATION);
          __ifThenElse(infix_$bang$eq(r1, unit(0)), r1, {
            val r2: this.Rep[Int] = k1.CUST_NATION.diff(k2.CUST_NATION);
            __ifThenElse(infix_$bang$eq(r2, unit(0)), r2, __ifThenElse(k1.L_YEAR.$less(k2.L_YEAR), unit(-1), __ifThenElse(k1.L_YEAR.$greater(k2.L_YEAR), unit(1), unit(0))))
          })
        })));
        val po: this.Rep[ch.epfl.data.legobase.queryengine.volcano.PrintOp[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.queryengine.Q7GRPRecord]]] = __newPrintOp(so)(__lambda(((kv: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.queryengine.Q7GRPRecord]]) => printf(unit("%s|%s|%d|%.4f\n"), kv.key.SUPP_NATION.string, kv.key.CUST_NATION.string, kv.key.L_YEAR, kv.aggs.apply(unit(0))))), __lambda((() => unit(true))));
        po.open();
        po.next();
        printf(unit("(%d rows)\n"), po.numRows);
        unit(())
      })
    }
  }
}
trait QueriesComponent extends QueriesOps with QueriesImplicits { self: QueryComponent => }
trait QueryComponent extends QueriesComponent with AGGRecordComponent with WindowRecordComponent with CharacterComponent with DoubleComponent with IntComponent with LongComponent with ArrayComponent with LINEITEMRecordComponent with K2DBScannerComponent with IntegerComponent with BooleanComponent with HashMapComponent with SetComponent with TreeSetComponent with DefaultEntryComponent with ArrayBufferComponent with ManualLiftedLegoBase { self: DeepDSL => }